================================================================================
Running both images locally:
================================================================================
Some Terminology: https://phoenixnap.com/kb/docker-image-vs-container
Container Networking: https://docs.docker.com/config/containers/container-networking/

// Choose a name for your course-catalog-api container
// Referred to as [CCA_NAME]

// Remove the container if it already exists
docker container rm [CCA_NAME]

// Use a temp file to store some lengthy terminal outputs and prettify them
// Referred to as [TEMP_FILE]

// Create network "dev_default", volume "dev_pg", containers "dev_postresql_1" 
// and "dev_es_1"
yarn dev:docker

// Show network IDs, use dev_default's as [NETWORK_ID]
docker network ls

// Show container IDs, use dev_postgresql_1's as [POSTGRES_ID], use dev_es_1's 
// as [ELASTICSEARCH_ID]
docker container ls

// Show all container config info, go to 
// NetworkSettings > Networks > dev_default > IPAddress, use that value as 
// [POSTGRES_IP_ADDRESS]
docker inspect [POSTGRES_ID] > [TEMP_FILE] 

// Alternative to previous command, outputs just the IPAddress
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' [POSTGRES_ID] 

// Use IPAddress as [ELASTICSEARCH_IP_ADDRESS]
docker inspect [ELASTICSEARCH_ID] > [TEMP_FILE]

// The dockerized CCA will not be able to go to 'localhost:XXXX' to access
// Postgres and Elasticearch like a regular local CCA would, so we have to
// tell it to use the docker network IPs of Postgres and Elasticsearch:
// - In /prisma/.env change DATABASE_URL to use [POSTGRES_IP_ADDRESS]
// - In /utils/elastic.ts change URL to use [ELASTICSEARCH_IP_ADDRESS]

// Build a docker image according to the Dockerfile
docker build .

// List all docker images. Use the newly built image's ID as [CCA_IMAGE_ID]
docker image ls

// Remove any docker image you no longer need
docker image rm IMAGE_ID

// Create a container to run the course-catalog-api. The CCA runs at port 4000,
// so we map port 4000 on the Docker container to port 4000 on our machine
docker create --name [CCA_NAME] --net [NETWORK_ID] -p 4000:4000 [CCA_IMAGE_ID]

// Run the course-catalog-api container. If you go to localhost:4000 you should
// see the graphql dashboard
docker start [CCA_NAME]

// Print the container logs to the terminal, -f to "follow" new logs
docker logs [CCA_NAME] -f

// Stop the container
docker stop [CCA_NAME]

// Examples of what your variables might look like
[CCA_NAME] = webserver
[TEMP_FILE] = dillon.json
[NETWORK_ID] = 7249d03eab1d
[POSTGRES_ID] = 7605d19d8cac
[ELASTICSEARCH_ID] = cfde1be92ced
[POSTGRES_IP_ADDRESS] = 172.27.0.3
[ELASTICSEARCH_IP_ADDRESS] = 172.27.0.2
[CCA_IMAGE_ID] = 5cbadbbd2441

================================================================================